module main_func {
//   type pc_t = enum {0bv2, 1bv2, 2bv2}; // program locations in main
  type pc_t = bv2;

  input enable : boolean; // true iff main can run
  sharedvar timerCount : integer; // defined in parent module
  var pc : pc_t; // prog location in main
  assume(pc >=_u 0bv2 && pc <_u 3bv2);

  init {
    pc = 0bv2;
  }

  next {
    if (enable) {
      case
        pc == 0bv2 : {
          if (timerCount == 0) { pc' = 2bv2; }
          else { pc' = 1bv2; }
        }
        pc == 1bv2 : {
          pc' = 0bv2; 
        }
        pc == 2bv2 : {
          pc' = 2bv2;
        }
      esac
    }
  }
} // end module main_func


module ISR_func {
//  type pc_t = enum {0bv2, 1bv2, 2bv2};
 type pc_t = bv2;

 input enable : boolean; // true iff the ISR can run
 sharedvar timerCount : integer;
 var pc : pc_t; // prog location for the ISR
 assume(pc >=_u 0bv2 && pc <_u 3bv2);

 output return_ISR : boolean; // true iff the ISR is returning on that specific step

 init {
   pc = 0bv2;
   return_ISR = false;
 }

 next {
   if (enable) {
     case
       pc == 0bv2 : { pc' = 1bv2; return_ISR '= false; }
       pc == 1bv2 && timerCount != 0 : { pc' = 2bv2; return_ISR' = false; }
       pc == 1bv2 && timerCount == 0 : { pc' = 0bv2; return_ISR' = true; }
       pc == 2bv2 : { timerCount' = timerCount-1; pc' = 0bv2; return_ISR' = true; }
     esac
   } else {
     pc' = pc;
     return_ISR' = false;
   }
 }
} // end module ISR_func


module main { // composition of main function and ISR

//   type mode_t = enum {0bv1, 1bv1};  // type indicates which of the two functions is active
  type mode_t = bv1;
  type ISR_func_pc_t = ISR_func.pc_t;

  input assert_intr : boolean; // input that is true iff an interrupt has occurred

  var timerCount : integer; // shared variable timerCount
  var mode : mode_t; // variable indicates which of the two functions is active
  var M_enable, I_enable: boolean; // M_enable indicates that the main function is enabled to run; I_enable indicates that the ISR is enabled to run
  var return_ISR : boolean; // indicates that ISR has returned

  // create instances of the main and ISR modules -- these are the functions to be composed
  instance main_f : main_func (enable : (M_enable), timerCount : (timerCount));
  instance ISR_f : ISR_func (enable : (I_enable), timerCount : (timerCount), return_ISR : (return_ISR));

  synthesis function h(x : mode_t, y : boolean) : boolean;

  // YOU WILL NEED TO CHANGE WHAT'S INSIDE THIS PROCEDURE
  // THIS CODE SHOULD ONLY UPDATE THE VARIABLES mode, M_enable, and I_enable
  procedure update_mode()
    modifies mode;
  {
    case
    //   (mode == 0bv1 && assert_intr) : {
      (h(mode, assert_intr)) : {
        mode = 1bv1;
      }
      (mode == 1bv1 && return_ISR) : {
        mode = 0bv1;
      }
    esac
  }
  // NO MODIFICATION TO CODE BELOW
  
  init {
    mode = 0bv1;  // Initially main function is active
    timerCount = 2; // Initial value of timerCount set to 2
    M_enable = true; 
    I_enable = false;
  }

  next {
    call update_mode(); // update to mode take effect on next step
    // Note these updates use the old value of mode.
    M_enable' = (mode == 0bv1);
    I_enable' = (mode == 1bv1);
    next (main_f); 
    next (ISR_f);
  }

 // PROPERTIES IN Sys MODULE
 invariant main_ISR_mutex: (M_enable != I_enable);
 property[LTL] one_step_ISR_return: G(return_ISR ==> X(!return_ISR));
 property[LTL] main_after_ISR: G((I_enable && X(M_enable)) ==> return_ISR);
 property[LTL] ISR_after_main: G((M_enable && X(I_enable)) ==> (assert_intr));

 control {
    // check the invariant.
    v = unroll(20);
    check; 
    print_results;
    v.print_cex(
        mode, M_enable, I_enable, 
        return_ISR, assert_intr,
        main_f.pc, ISR_f.pc
    );
    // check the LTL properties.
    vobj = bmc(5);
    check;
    print_results;
    vobj.print_cex(mode,M_enable,I_enable,return_ISR,assert_intr,main_f.pc,ISR_f.pc);
  }
}
