/**
  * This is a scaled up version of the Electronic Purse example (Sec. 6.2)
  * taken from the IEEE S&P 2009 paper "Automatic Discovery and Quantification
  * of Information Leaks" by Michael Backes, Boris Kopf, and Andrey
  * Rybalchenko.
  *
  * We are considering an adversary who can observe the values of steps and
  * done and showing that every adversary observation trace corresponds to at
  * least 256 different account balances. 
  */

module electronic_purse
{
  var balance   : bv16;
  var decr      : bv9;
  output steps  : integer;
  output done   : boolean;

  init {
    assume (balance >= 0bv16);
    decr  = 256bv9;
    steps = 0;
    done  = (balance < bv_zero_extend(7, decr));
  }

  next {
    var decr_extended : bv16;
    decr_extended = bv_zero_extend(7, decr);
    if (balance >= decr_extended) {
      balance' = balance - decr_extended;
      steps' = steps + 1;
    } else {
      done' = true;
    }
  }

  //invariant bogus: steps != 5;

  control {
    v = unroll(5);
    check;
    print_results;
    v.print_cex(balance, decr, steps, done);
  }
}


module main
{
    
/*------------------------------------------------------------------+
 | Variable set (Y) = {p}                                           |
 +------------------------------------------------------------------*/
  const p1, p2 : bv8;

  var steps0, steps1, steps2 : integer;
  var done0, done1, done2    : boolean;

  instance acct0 : electronic_purse(steps : (steps0), done : (done0));
  instance acct1 : electronic_purse(steps : (steps1), done : (done1));
  instance acct2 : electronic_purse(steps : (steps2), done : (done2));

  synthesis function h(x : bv8, y : bv16) : bv16;

/*------------------------------------------------------------------+
 | Trace enumeration predicate (E)                                  |
 | ===============================                                  |
 |  Enumeration predicate to map a state (by mapping variable       |
 |  'balance') in acct1 to acct2.                                   |
 +------------------------------------------------------------------*/
  define pi_balance(p : bv8, b : bv16) : bv16 =
    b[15:8] ++ (b[7:0] + p);

  init {
/*------------------------------------------------------------------+
 | Injective Trace enumeration Witness (I): Property 12             |
 | =======================================                          |
 |  Makes use of enumeration predicate (pi_balance) defined above.  |
 |      - Mapping initial state.                                    |
 +------------------------------------------------------------------*/
    assume (acct1.balance == pi_balance(p1, acct0.balance));
    assume (acct2.balance == pi_balance(p2, acct0.balance));
  
  }
  next {
    next (acct0);
    next (acct1);
    next (acct2);
  }

  // Public constant are same. It is initialized in the model.
  invariant eq_decr        : acct0.decr == 256bv9 && 
                             acct1.decr == 256bv9 && 
                             acct2.decr == 256bv9;

/*------------------------------------------------------------------+
 | Valid function (V)                                               |
 | ==================                                               |
 |  Defines the valid function for the variable set Y.              |
 +------------------------------------------------------------------*/
  assume (p1 != 0bv8 && p2 != 0bv8 && p1 != p2);
  invariant p1_is_in_range  : 0bv8 <_u p1 && p1 <=_u 255bv8;
  invariant p2_is_in_range  : 0bv8 <_u p2 && p2 <=_u 255bv8;

/*------------------------------------------------------------------+
 | Injective Trace enumeration Witness (I): Property 13             |
 | =======================================                          |
 |  Makes use of enumeration predicate (pi_balance) defined above.  |
 |      - Mapping all the states.                                   |
 +------------------------------------------------------------------*/
  invariant eq_pi_balance1 : acct1.balance == h(p1, acct0.balance);
  invariant eq_pi_balance2 : acct2.balance == h(p2, acct0.balance);
  

/*------------------------------------------------------------------+
 |  Proving deniability                                             |
 |  ===================                                             |
 |   delta  = F(secret(account1) != secret(account2))               |
 |   psi    = G(observations(account1) == observations(account2))   |
 +------------------------------------------------------------------*/
  // Secret inputs - different in both the traces
  invariant neq_balance    : (acct1.balance != acct2.balance);
    
  // Adversary observations - same in both the traces
  invariant eq_done        : acct2.done == acct1.done;
  invariant eq_steps       : acct2.steps == acct1.steps;


  control {
    v = induction(1);
    check;
    print_results;
    v.print_cex(
      p1, p2, 
      acct1.balance,  acct2.balance,
      acct1.decr,     acct2.decr,
      acct1.steps,    acct2.steps,
      acct1.done,     acct2.done
    );
  }
}
